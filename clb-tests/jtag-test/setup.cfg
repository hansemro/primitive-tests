# Source interface adapter before sourcing this openocd script!

# Add XC7 tap
source [find cpld/xilinx-xc7.cfg]
adapter speed 1
init

# JTAG Instruction for accessing front end
set user3_instr 0x22
set user3_width 18
# JTAG Instruction for accessing back end
set user4_instr 0x23
set user4_width 16

# Read and return data from LUTRAM at given address
# Arg:
#  - address: 8-bit address
# Returns 8-bit data
proc read_lutram {address} {
    global user3_instr
    global user3_width
    global user4_instr
    global user4_width
    # FE: Set address to read
    set address [expr {$address & 0xff}]
    set instr [expr {$address << 2}]
    irscan xc7.tap $user3_instr
    drscan xc7.tap $user3_width $instr
    # BE: Get data from reply
    irscan xc7.tap $user4_instr
    set ret [string cat 0x [drscan xc7.tap $user4_width 0]]
    set ret [expr {$ret >> 8}]
    return [format 0x%x $ret]
}

# Write data to LUTRAM at given address
# Args:
#  - address: 8-bit address
#  - data: 8-bit data
# Returns 0 on completion
proc write_lutram {address data} {
    global user3_instr
    global user3_width
    global user4_instr
    global user4_width
    # FE: Assert WE with data to load
    set address [expr {$address & 0xff}]
    set data [expr {$data & 0xff}]
    set instr [expr {($data << 10) | ($address << 2) | 0x3}]
    irscan xc7.tap $user3_instr
    drscan xc7.tap $user3_width $instr
    # BE: Perform write by toggling LUTRAM WCLK
    irscan xc7.tap $user4_instr
    drscan xc7.tap $user4_width 0
    return 0
}

# Read from LUTRAM from start to start+count (exclusive)
# Args:
#  - start: starting 8-bit address
#  - count: number of read operations
# Returns list of values
proc read_lutram_range {start count} {
    set ret {}
    set start [expr {$start & 0xff}]
    set end [expr {$start + $count}]
    for {set x $start} {$x < $end} {set x [expr {$x + 1}]} {
        lappend ret [read_lutram $x]
    }
    return $ret
}

# Shift in and out n-bit data through SRL shift register.
# Args:
#  - n: number of bits to shift
#  - data: n-bit data to write to SRL starting with MSB
# Returns list of n 8-bit values read from SRL starting with MSB
proc read_write_srl {n data} {
    global user3_instr
    global user3_width
    global user4_instr
    global user4_width
    if {$n > 64} {
        error "read_write_srl does not support n > 64" 65
        return {}
    }
    set ret {}
    for {set x [expr {$n - 1}]} {$x >= 0} {set x [expr {$x - 1}]} {
        # FE: Assert CE with a bit from data
        set bit [expr {($data >> $x) & 0x1}]
        set instr [expr {($bit << 10) | 0x3}]
        irscan xc7.tap $user3_instr
        drscan xc7.tap $user3_width $instr
        # BE: Shift once with CE asserted to shift in data
        irscan xc7.tap $user4_instr
        drscan xc7.tap 1 0
        # FE: Deassert CE to not shift and prepare for reading
        irscan xc7.tap $user3_instr
        drscan xc7.tap $user3_width 0
        # BE: Get data from reply
        irscan xc7.tap $user4_instr
        set reply [string cat 0x [drscan xc7.tap $user4_width 0]]
        lappend ret [expr {$reply >> 8}]
    }
    return $ret
}

echo "setup.cfg loaded"
