# Source interface adapter before sourcing this openocd script!

# Add XC7 tap
source [find cpld/xilinx-xc7.cfg]
adapter speed 1
init

set user3_instr 0x22
set user3_width 18
set user4_instr 0x23
set user4_width 16

# Read and return data from LUTRAM at given address
# Arg:
#  - address: 8-bit address
# Returns 8-bit data
proc read_lutram {address} {
    global user3_instr
    global user3_width
    global user4_instr
    global user4_width
    set address [expr {$address & 0xff}]
    set instr [expr {$address << 2}]
    # Send instruction while USER3 is loaded
    irscan xc7.tap $user3_instr
    drscan xc7.tap $user3_width $instr
    # Read reply while USER4 is loaded
    irscan xc7.tap $user4_instr
    set ret [string cat 0x [drscan xc7.tap $user4_width 0]]
    set ret [expr {$ret >> 8}]
    return [format 0x%x $ret]
}

# Write data to LUTRAM at given address
# Args:
#  - address: 8-bit address
#  - data: 8-bit data
# Returns 0 on completion
proc write_lutram {address data} {
    global user3_instr
    global user3_width
    global user4_instr
    global user4_width
    set address [expr {$address & 0xff}]
    set data [expr {$data & 0xff}]
    set instr [expr {($data << 10) | ($address << 2) | 0x3}]
    # Send instruction while USER3 is loaded
    irscan xc7.tap $user3_instr
    drscan xc7.tap $user3_width $instr
    # Read reply while USER4 is loaded to perform write by toggling LUTRAM WCLK
    irscan xc7.tap $user4_instr
    drscan xc7.tap $user4_width 0
    return 0
}

# Read from LUTRAM from start to start+count (exclusive)
# Args:
#  - start: starting 8-bit address
#  - count: number of read operations
# Returns array (index value)
proc read_lutram_range {start count} {
    array set arr {}
    set start [expr {$start & 0xff}]
    set end [expr {$start + $count}]
    for {set x $start} {$x < $end} {set x [expr {$x + 1}]} {
        set arr($x) [read_lutram $x]
        echo [format 0x%x $arr($x)]
    }
    return $arr
}

echo "setup.cfg loaded"
