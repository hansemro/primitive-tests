// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : top.v
// Device     : xc7a100tfgg676-1
// LiteX sha1 : 7e641890
// Date       : 2023-10-19 04:15:59
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
    input  wire          clk50,
    output reg           user_led0,
    output reg           user_led1,
    output reg           user_led2,
    output reg           user_led3,
    output reg           user_led4
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          jtag_clk;
reg     [2:0] jtag_count = 3'd0;
reg     [2:0] jtag_count_next_value2 = 3'd0;
reg           jtag_count_next_value_ce2 = 1'd0;
reg     [4:0] jtag_data = 5'd0;
reg     [4:0] jtag_data_next_value1 = 5'd0;
reg           jtag_data_next_value_ce1 = 1'd0;
wire          jtag_fsm_reset;
wire          jtag_jtag_capture;
wire          jtag_jtag_reset;
wire          jtag_jtag_shift;
wire          jtag_jtag_tck;
wire          jtag_jtag_tdi;
reg           jtag_jtag_tdo = 1'd0;
wire          jtag_jtag_tms;
wire          jtag_jtag_update;
reg           jtag_ready = 1'd0;
reg           jtag_ready_next_value3 = 1'd0;
reg           jtag_ready_next_value_ce3 = 1'd0;
wire          jtag_rst;
wire    [6:0] jtag_rx_cdc_asyncfifo_din;
wire    [6:0] jtag_rx_cdc_asyncfifo_dout;
wire          jtag_rx_cdc_asyncfifo_re;
wire          jtag_rx_cdc_asyncfifo_readable;
wire          jtag_rx_cdc_asyncfifo_we;
wire          jtag_rx_cdc_asyncfifo_writable;
wire    [2:0] jtag_rx_cdc_consume_wdomain;
wire          jtag_rx_cdc_fifo_in_first;
wire          jtag_rx_cdc_fifo_in_last;
wire    [4:0] jtag_rx_cdc_fifo_in_payload_data;
wire          jtag_rx_cdc_fifo_out_first;
wire          jtag_rx_cdc_fifo_out_last;
wire    [4:0] jtag_rx_cdc_fifo_out_payload_data;
wire          jtag_rx_cdc_graycounter0_ce;
reg     [2:0] jtag_rx_cdc_graycounter0_q = 3'd0;
reg     [2:0] jtag_rx_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] jtag_rx_cdc_graycounter0_q_next;
reg     [2:0] jtag_rx_cdc_graycounter0_q_next_binary = 3'd0;
wire          jtag_rx_cdc_graycounter1_ce;
reg     [2:0] jtag_rx_cdc_graycounter1_q = 3'd0;
reg     [2:0] jtag_rx_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] jtag_rx_cdc_graycounter1_q_next;
reg     [2:0] jtag_rx_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] jtag_rx_cdc_produce_rdomain;
wire    [1:0] jtag_rx_cdc_rdport_adr;
wire    [6:0] jtag_rx_cdc_rdport_dat_r;
reg           jtag_rx_cdc_sink_first = 1'd0;
reg           jtag_rx_cdc_sink_last = 1'd0;
reg     [4:0] jtag_rx_cdc_sink_payload_data = 5'd0;
wire          jtag_rx_cdc_sink_ready;
reg           jtag_rx_cdc_sink_valid = 1'd0;
wire          jtag_rx_cdc_source_first;
wire          jtag_rx_cdc_source_last;
wire    [4:0] jtag_rx_cdc_source_payload_data;
wire          jtag_rx_cdc_source_ready;
wire          jtag_rx_cdc_source_valid;
wire    [1:0] jtag_rx_cdc_wrport_adr;
wire    [6:0] jtag_rx_cdc_wrport_dat_r;
wire    [6:0] jtag_rx_cdc_wrport_dat_w;
wire          jtag_rx_cdc_wrport_we;
reg           jtag_sink_sink_first = 1'd0;
reg           jtag_sink_sink_last = 1'd0;
wire    [4:0] jtag_sink_sink_payload_data;
wire          jtag_sink_sink_ready;
wire          jtag_sink_sink_valid;
wire          jtag_source_source_first;
wire          jtag_source_source_last;
wire    [4:0] jtag_source_source_payload_data;
wire          jtag_source_source_ready;
wire          jtag_source_source_valid;
wire    [6:0] jtag_tx_cdc_asyncfifo_din;
wire    [6:0] jtag_tx_cdc_asyncfifo_dout;
wire          jtag_tx_cdc_asyncfifo_re;
wire          jtag_tx_cdc_asyncfifo_readable;
wire          jtag_tx_cdc_asyncfifo_we;
wire          jtag_tx_cdc_asyncfifo_writable;
wire    [2:0] jtag_tx_cdc_consume_wdomain;
wire          jtag_tx_cdc_fifo_in_first;
wire          jtag_tx_cdc_fifo_in_last;
wire    [4:0] jtag_tx_cdc_fifo_in_payload_data;
wire          jtag_tx_cdc_fifo_out_first;
wire          jtag_tx_cdc_fifo_out_last;
wire    [4:0] jtag_tx_cdc_fifo_out_payload_data;
wire          jtag_tx_cdc_graycounter0_ce;
reg     [2:0] jtag_tx_cdc_graycounter0_q = 3'd0;
reg     [2:0] jtag_tx_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] jtag_tx_cdc_graycounter0_q_next;
reg     [2:0] jtag_tx_cdc_graycounter0_q_next_binary = 3'd0;
wire          jtag_tx_cdc_graycounter1_ce;
reg     [2:0] jtag_tx_cdc_graycounter1_q = 3'd0;
reg     [2:0] jtag_tx_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] jtag_tx_cdc_graycounter1_q_next;
reg     [2:0] jtag_tx_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] jtag_tx_cdc_produce_rdomain;
wire    [1:0] jtag_tx_cdc_rdport_adr;
wire    [6:0] jtag_tx_cdc_rdport_dat_r;
wire          jtag_tx_cdc_sink_first;
wire          jtag_tx_cdc_sink_last;
wire    [4:0] jtag_tx_cdc_sink_payload_data;
wire          jtag_tx_cdc_sink_ready;
wire          jtag_tx_cdc_sink_valid;
wire          jtag_tx_cdc_source_first;
wire          jtag_tx_cdc_source_last;
wire    [4:0] jtag_tx_cdc_source_payload_data;
reg           jtag_tx_cdc_source_ready = 1'd0;
wire          jtag_tx_cdc_source_valid;
wire    [1:0] jtag_tx_cdc_wrport_adr;
wire    [6:0] jtag_tx_cdc_wrport_dat_r;
wire    [6:0] jtag_tx_cdc_wrport_dat_w;
wire          jtag_tx_cdc_wrport_we;
reg           jtag_valid = 1'd0;
reg           jtag_valid_next_value0 = 1'd0;
reg           jtag_valid_next_value_ce0 = 1'd0;
reg     [1:0] next_state = 2'd0;
wire          rst_meta;
reg     [1:0] state = 2'd0;
wire          sys_clk;
reg           sys_rst = 1'd0;
reg     [2:0] xilinxmultiregimpl0_regs0 = 3'd0;
reg     [2:0] xilinxmultiregimpl0_regs1 = 3'd0;
reg     [2:0] xilinxmultiregimpl1_regs0 = 3'd0;
reg     [2:0] xilinxmultiregimpl1_regs1 = 3'd0;
reg     [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
reg     [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
reg     [2:0] xilinxmultiregimpl3_regs0 = 3'd0;
reg     [2:0] xilinxmultiregimpl3_regs1 = 3'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk50;
assign jtag_source_source_ready = 1'd1;
assign jtag_sink_sink_payload_data = {user_led4, user_led3, user_led2, user_led1, user_led0};
assign jtag_sink_sink_valid = 1'd1;
assign jtag_clk = jtag_jtag_tck;
assign jtag_tx_cdc_sink_valid = jtag_sink_sink_valid;
assign jtag_sink_sink_ready = jtag_tx_cdc_sink_ready;
assign jtag_tx_cdc_sink_first = jtag_sink_sink_first;
assign jtag_tx_cdc_sink_last = jtag_sink_sink_last;
assign jtag_tx_cdc_sink_payload_data = jtag_sink_sink_payload_data;
assign jtag_source_source_valid = jtag_rx_cdc_source_valid;
assign jtag_rx_cdc_source_ready = jtag_source_source_ready;
assign jtag_source_source_first = jtag_rx_cdc_source_first;
assign jtag_source_source_last = jtag_rx_cdc_source_last;
assign jtag_source_source_payload_data = jtag_rx_cdc_source_payload_data;
assign jtag_fsm_reset = (jtag_jtag_reset | jtag_jtag_capture);
assign jtag_tx_cdc_asyncfifo_din = {jtag_tx_cdc_fifo_in_last, jtag_tx_cdc_fifo_in_first, jtag_tx_cdc_fifo_in_payload_data};
assign {jtag_tx_cdc_fifo_out_last, jtag_tx_cdc_fifo_out_first, jtag_tx_cdc_fifo_out_payload_data} = jtag_tx_cdc_asyncfifo_dout;
assign jtag_tx_cdc_sink_ready = jtag_tx_cdc_asyncfifo_writable;
assign jtag_tx_cdc_asyncfifo_we = jtag_tx_cdc_sink_valid;
assign jtag_tx_cdc_fifo_in_first = jtag_tx_cdc_sink_first;
assign jtag_tx_cdc_fifo_in_last = jtag_tx_cdc_sink_last;
assign jtag_tx_cdc_fifo_in_payload_data = jtag_tx_cdc_sink_payload_data;
assign jtag_tx_cdc_source_valid = jtag_tx_cdc_asyncfifo_readable;
assign jtag_tx_cdc_source_first = jtag_tx_cdc_fifo_out_first;
assign jtag_tx_cdc_source_last = jtag_tx_cdc_fifo_out_last;
assign jtag_tx_cdc_source_payload_data = jtag_tx_cdc_fifo_out_payload_data;
assign jtag_tx_cdc_asyncfifo_re = jtag_tx_cdc_source_ready;
assign jtag_tx_cdc_graycounter0_ce = (jtag_tx_cdc_asyncfifo_writable & jtag_tx_cdc_asyncfifo_we);
assign jtag_tx_cdc_graycounter1_ce = (jtag_tx_cdc_asyncfifo_readable & jtag_tx_cdc_asyncfifo_re);
assign jtag_tx_cdc_asyncfifo_writable = (((jtag_tx_cdc_graycounter0_q[2] == jtag_tx_cdc_consume_wdomain[2]) | (jtag_tx_cdc_graycounter0_q[1] == jtag_tx_cdc_consume_wdomain[1])) | (jtag_tx_cdc_graycounter0_q[0] != jtag_tx_cdc_consume_wdomain[0]));
assign jtag_tx_cdc_asyncfifo_readable = (jtag_tx_cdc_graycounter1_q != jtag_tx_cdc_produce_rdomain);
assign jtag_tx_cdc_wrport_adr = jtag_tx_cdc_graycounter0_q_binary[1:0];
assign jtag_tx_cdc_wrport_dat_w = jtag_tx_cdc_asyncfifo_din;
assign jtag_tx_cdc_wrport_we = jtag_tx_cdc_graycounter0_ce;
assign jtag_tx_cdc_rdport_adr = jtag_tx_cdc_graycounter1_q_next_binary[1:0];
assign jtag_tx_cdc_asyncfifo_dout = jtag_tx_cdc_rdport_dat_r;
always @(*) begin
    jtag_tx_cdc_graycounter0_q_next_binary <= 3'd0;
    if (jtag_tx_cdc_graycounter0_ce) begin
        jtag_tx_cdc_graycounter0_q_next_binary <= (jtag_tx_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        jtag_tx_cdc_graycounter0_q_next_binary <= jtag_tx_cdc_graycounter0_q_binary;
    end
end
assign jtag_tx_cdc_graycounter0_q_next = (jtag_tx_cdc_graycounter0_q_next_binary ^ jtag_tx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    jtag_tx_cdc_graycounter1_q_next_binary <= 3'd0;
    if (jtag_tx_cdc_graycounter1_ce) begin
        jtag_tx_cdc_graycounter1_q_next_binary <= (jtag_tx_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        jtag_tx_cdc_graycounter1_q_next_binary <= jtag_tx_cdc_graycounter1_q_binary;
    end
end
assign jtag_tx_cdc_graycounter1_q_next = (jtag_tx_cdc_graycounter1_q_next_binary ^ jtag_tx_cdc_graycounter1_q_next_binary[2:1]);
assign jtag_rx_cdc_asyncfifo_din = {jtag_rx_cdc_fifo_in_last, jtag_rx_cdc_fifo_in_first, jtag_rx_cdc_fifo_in_payload_data};
assign {jtag_rx_cdc_fifo_out_last, jtag_rx_cdc_fifo_out_first, jtag_rx_cdc_fifo_out_payload_data} = jtag_rx_cdc_asyncfifo_dout;
assign jtag_rx_cdc_sink_ready = jtag_rx_cdc_asyncfifo_writable;
assign jtag_rx_cdc_asyncfifo_we = jtag_rx_cdc_sink_valid;
assign jtag_rx_cdc_fifo_in_first = jtag_rx_cdc_sink_first;
assign jtag_rx_cdc_fifo_in_last = jtag_rx_cdc_sink_last;
assign jtag_rx_cdc_fifo_in_payload_data = jtag_rx_cdc_sink_payload_data;
assign jtag_rx_cdc_source_valid = jtag_rx_cdc_asyncfifo_readable;
assign jtag_rx_cdc_source_first = jtag_rx_cdc_fifo_out_first;
assign jtag_rx_cdc_source_last = jtag_rx_cdc_fifo_out_last;
assign jtag_rx_cdc_source_payload_data = jtag_rx_cdc_fifo_out_payload_data;
assign jtag_rx_cdc_asyncfifo_re = jtag_rx_cdc_source_ready;
assign jtag_rx_cdc_graycounter0_ce = (jtag_rx_cdc_asyncfifo_writable & jtag_rx_cdc_asyncfifo_we);
assign jtag_rx_cdc_graycounter1_ce = (jtag_rx_cdc_asyncfifo_readable & jtag_rx_cdc_asyncfifo_re);
assign jtag_rx_cdc_asyncfifo_writable = (((jtag_rx_cdc_graycounter0_q[2] == jtag_rx_cdc_consume_wdomain[2]) | (jtag_rx_cdc_graycounter0_q[1] == jtag_rx_cdc_consume_wdomain[1])) | (jtag_rx_cdc_graycounter0_q[0] != jtag_rx_cdc_consume_wdomain[0]));
assign jtag_rx_cdc_asyncfifo_readable = (jtag_rx_cdc_graycounter1_q != jtag_rx_cdc_produce_rdomain);
assign jtag_rx_cdc_wrport_adr = jtag_rx_cdc_graycounter0_q_binary[1:0];
assign jtag_rx_cdc_wrport_dat_w = jtag_rx_cdc_asyncfifo_din;
assign jtag_rx_cdc_wrport_we = jtag_rx_cdc_graycounter0_ce;
assign jtag_rx_cdc_rdport_adr = jtag_rx_cdc_graycounter1_q_next_binary[1:0];
assign jtag_rx_cdc_asyncfifo_dout = jtag_rx_cdc_rdport_dat_r;
always @(*) begin
    jtag_rx_cdc_graycounter0_q_next_binary <= 3'd0;
    if (jtag_rx_cdc_graycounter0_ce) begin
        jtag_rx_cdc_graycounter0_q_next_binary <= (jtag_rx_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        jtag_rx_cdc_graycounter0_q_next_binary <= jtag_rx_cdc_graycounter0_q_binary;
    end
end
assign jtag_rx_cdc_graycounter0_q_next = (jtag_rx_cdc_graycounter0_q_next_binary ^ jtag_rx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    jtag_rx_cdc_graycounter1_q_next_binary <= 3'd0;
    if (jtag_rx_cdc_graycounter1_ce) begin
        jtag_rx_cdc_graycounter1_q_next_binary <= (jtag_rx_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        jtag_rx_cdc_graycounter1_q_next_binary <= jtag_rx_cdc_graycounter1_q_binary;
    end
end
assign jtag_rx_cdc_graycounter1_q_next = (jtag_rx_cdc_graycounter1_q_next_binary ^ jtag_rx_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
    jtag_count_next_value2 <= 3'd0;
    jtag_count_next_value_ce2 <= 1'd0;
    jtag_data_next_value1 <= 5'd0;
    jtag_data_next_value_ce1 <= 1'd0;
    jtag_jtag_tdo <= 1'd0;
    jtag_ready_next_value3 <= 1'd0;
    jtag_ready_next_value_ce3 <= 1'd0;
    jtag_rx_cdc_sink_payload_data <= 5'd0;
    jtag_rx_cdc_sink_valid <= 1'd0;
    jtag_tx_cdc_source_ready <= 1'd0;
    jtag_valid_next_value0 <= 1'd0;
    jtag_valid_next_value_ce0 <= 1'd0;
    next_state <= 2'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            jtag_jtag_tdo <= jtag_data;
            if (jtag_jtag_shift) begin
                jtag_count_next_value2 <= (jtag_count + 1'd1);
                jtag_count_next_value_ce2 <= 1'd1;
                jtag_data_next_value1 <= {jtag_jtag_tdi, jtag_data[4:1]};
                jtag_data_next_value_ce1 <= 1'd1;
                if ((jtag_count == 3'd4)) begin
                    next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            jtag_jtag_tdo <= jtag_valid;
            if (jtag_jtag_shift) begin
                jtag_rx_cdc_sink_valid <= jtag_jtag_tdi;
                jtag_rx_cdc_sink_payload_data <= jtag_data;
                jtag_ready_next_value3 <= jtag_rx_cdc_sink_ready;
                jtag_ready_next_value_ce3 <= 1'd1;
                next_state <= 1'd0;
            end
        end
        default: begin
            jtag_jtag_tdo <= jtag_ready;
            if (jtag_jtag_shift) begin
                jtag_tx_cdc_source_ready <= jtag_jtag_tdi;
                jtag_valid_next_value0 <= jtag_tx_cdc_source_valid;
                jtag_valid_next_value_ce0 <= 1'd1;
                jtag_data_next_value1 <= jtag_tx_cdc_source_payload_data;
                jtag_data_next_value_ce1 <= 1'd1;
                jtag_count_next_value2 <= 1'd0;
                jtag_count_next_value_ce2 <= 1'd1;
                next_state <= 1'd1;
            end
        end
    endcase
end
assign jtag_tx_cdc_produce_rdomain = xilinxmultiregimpl0_regs1;
assign jtag_tx_cdc_consume_wdomain = xilinxmultiregimpl1_regs1;
assign jtag_rx_cdc_produce_rdomain = xilinxmultiregimpl2_regs1;
assign jtag_rx_cdc_consume_wdomain = xilinxmultiregimpl3_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge jtag_clk) begin
    jtag_tx_cdc_graycounter1_q_binary <= jtag_tx_cdc_graycounter1_q_next_binary;
    jtag_tx_cdc_graycounter1_q <= jtag_tx_cdc_graycounter1_q_next;
    jtag_rx_cdc_graycounter0_q_binary <= jtag_rx_cdc_graycounter0_q_next_binary;
    jtag_rx_cdc_graycounter0_q <= jtag_rx_cdc_graycounter0_q_next;
    state <= next_state;
    if (jtag_valid_next_value_ce0) begin
        jtag_valid <= jtag_valid_next_value0;
    end
    if (jtag_data_next_value_ce1) begin
        jtag_data <= jtag_data_next_value1;
    end
    if (jtag_count_next_value_ce2) begin
        jtag_count <= jtag_count_next_value2;
    end
    if (jtag_ready_next_value_ce3) begin
        jtag_ready <= jtag_ready_next_value3;
    end
    if (jtag_fsm_reset) begin
        jtag_valid <= 1'd0;
        jtag_ready <= 1'd0;
        jtag_data <= 5'd0;
        jtag_count <= 3'd0;
        state <= 2'd0;
    end
    if (jtag_rst) begin
        jtag_tx_cdc_graycounter1_q <= 3'd0;
        jtag_tx_cdc_graycounter1_q_binary <= 3'd0;
        jtag_rx_cdc_graycounter0_q <= 3'd0;
        jtag_rx_cdc_graycounter0_q_binary <= 3'd0;
        jtag_valid <= 1'd0;
        jtag_ready <= 1'd0;
        jtag_data <= 5'd0;
        jtag_count <= 3'd0;
        state <= 2'd0;
    end
    xilinxmultiregimpl0_regs0 <= jtag_tx_cdc_graycounter0_q;
    xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
    xilinxmultiregimpl3_regs0 <= jtag_rx_cdc_graycounter1_q;
    xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
end

always @(posedge sys_clk) begin
    if (jtag_source_source_valid) begin
        {user_led4, user_led3, user_led2, user_led1, user_led0} <= jtag_source_source_payload_data;
    end
    jtag_tx_cdc_graycounter0_q_binary <= jtag_tx_cdc_graycounter0_q_next_binary;
    jtag_tx_cdc_graycounter0_q <= jtag_tx_cdc_graycounter0_q_next;
    jtag_rx_cdc_graycounter1_q_binary <= jtag_rx_cdc_graycounter1_q_next_binary;
    jtag_rx_cdc_graycounter1_q <= jtag_rx_cdc_graycounter1_q_next;
    if (sys_rst) begin
        user_led0 <= 1'd0;
        user_led1 <= 1'd0;
        user_led2 <= 1'd0;
        user_led3 <= 1'd0;
        user_led4 <= 1'd0;
        jtag_tx_cdc_graycounter0_q <= 3'd0;
        jtag_tx_cdc_graycounter0_q_binary <= 3'd0;
        jtag_rx_cdc_graycounter1_q <= 3'd0;
        jtag_rx_cdc_graycounter1_q_binary <= 3'd0;
    end
    xilinxmultiregimpl1_regs0 <= jtag_tx_cdc_graycounter1_q;
    xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
    xilinxmultiregimpl2_regs0 <= jtag_rx_cdc_graycounter0_q;
    xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

BSCANE2 #(
	.JTAG_CHAIN(1'd1)
) BSCANE2 (
	.TDO(jtag_jtag_tdo),
	.CAPTURE(jtag_jtag_capture),
	.RESET(jtag_jtag_reset),
	.SHIFT(jtag_jtag_shift),
	.TCK(jtag_jtag_tck),
	.TDI(jtag_jtag_tdi),
	.TMS(jtag_jtag_tms),
	.UPDATE(jtag_jtag_update)
);

//------------------------------------------------------------------------------
// Memory storage: 4-words x 7-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 7 
// Port 1 | Read: Sync  | Write: ---- | 
reg [6:0] storage[0:3];
reg [6:0] storage_dat0;
reg [6:0] storage_dat1;
always @(posedge sys_clk) begin
	if (jtag_tx_cdc_wrport_we)
		storage[jtag_tx_cdc_wrport_adr] <= jtag_tx_cdc_wrport_dat_w;
	storage_dat0 <= storage[jtag_tx_cdc_wrport_adr];
end
always @(posedge jtag_clk) begin
	storage_dat1 <= storage[jtag_tx_cdc_rdport_adr];
end
assign jtag_tx_cdc_wrport_dat_r = storage_dat0;
assign jtag_tx_cdc_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 4-words x 7-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 7 
// Port 1 | Read: Sync  | Write: ---- | 
reg [6:0] storage_1[0:3];
reg [6:0] storage_1_dat0;
reg [6:0] storage_1_dat1;
always @(posedge jtag_clk) begin
	if (jtag_rx_cdc_wrport_we)
		storage_1[jtag_rx_cdc_wrport_adr] <= jtag_rx_cdc_wrport_dat_w;
	storage_1_dat0 <= storage_1[jtag_rx_cdc_wrport_adr];
end
always @(posedge sys_clk) begin
	storage_1_dat1 <= storage_1[jtag_rx_cdc_rdport_adr];
end
assign jtag_rx_cdc_wrport_dat_r = storage_1_dat0;
assign jtag_rx_cdc_rdport_dat_r = storage_1_dat1;


FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(jtag_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(sys_rst),
	.Q(rst_meta)
);

FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(jtag_clk),
	.CE(1'd1),
	.D(rst_meta),
	.PRE(sys_rst),
	.Q(jtag_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-10-19 04:15:59.
//------------------------------------------------------------------------------
