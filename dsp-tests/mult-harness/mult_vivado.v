/* Generated by Yosys 0.17 (git sha1 6f9602b4c, gcc 11.3.0-1ubuntu1~22.04 -fPIC -Os) */

(* \amaranth.hierarchy  = "TimesTable" *)
(* top =  1  *)
(* generator = "Amaranth" *)
module TimesTable(clk, rst, tx);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  wire [95:0] _00_;
  wire [95:0] _01_;
  wire _02_;
  wire [95:0] _03_;
  wire _04_;
  wire [48:0] _05_;
  wire [48:0] _06_;
  wire [95:0] _07_;
  wire _08_;
  wire _09_;
  wire [48:0] _10_;
  wire [48:0] _11_;
  wire _12_;
  wire [95:0] _13_;
  wire [95:0] _14_;
  wire _15_;
  reg [47:0] a;
  reg [47:0] \a$next ;
  reg [47:0] b;
  reg [47:0] \b$next ;
  input clk;
  wire clk;
  reg [47:0] mult_factor_a;
  reg [47:0] mult_factor_b;
  wire [95:0] mult_result;
  reg [95:0] r;
  input rst;
  wire rst;
  reg serial_ack;
  reg [7:0] serial_data;
  wire serial_o;
  wire serial_rdy;
  output tx;
  reg tx;
  assign _02_ = r <= 16'hffff;
  assign _01_ = _02_ ? _07_ : _14_;
  assign _04_ = r <= 8'hff;
  assign _03_ = _04_ ? r : _01_;
  assign _06_ = a + 1'h1;
  assign _08_ = a == 10'h200;
  assign _09_ = a == 10'h200;
  assign _11_ = b + 1'h1;
  assign _12_ = b == 10'h200;
  assign _07_ = + r[95:8];
  assign _13_ = + r[95:16];
  assign _15_ = r <= 24'hffffff;
  assign _14_ = _15_ ? _13_ : r;
  mult mult (
    .clk(clk),
    .factor_a(mult_factor_a),
    .factor_b(mult_factor_b),
    .result(mult_result),
    .rst(rst)
  );
  serial serial (
    .ack(serial_ack),
    .clk(clk),
    .data(serial_data),
    .o(serial_o),
    .rdy(serial_rdy),
    .rst(rst)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    mult_factor_a = 48'h000000000000;
    mult_factor_a = a;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    mult_factor_b = 48'h000000000000;
    mult_factor_b = b;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    r = 96'h000000000000000000000000;
    r = mult_result;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    tx = 1'h0;
    tx = serial_o;
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    serial_data = 8'h00;
    casez (serial_rdy)
      /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:50" */
      1'h1:
          serial_data = _00_[7:0];
    endcase
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    serial_ack = 1'h0;
    casez (serial_rdy)
      /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:50" */
      1'h1:
          serial_ack = 1'h1;
    endcase
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \a$next  = a;
    casez (serial_rdy)
      /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:50" */
      1'h1:
        begin
          \a$next  = _05_[47:0];
          casez (_08_)
            /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:59" */
            1'h1:
                \a$next  = 48'h000000000000;
          endcase
        end
    endcase
    casez (rst)
      1'h1:
          \a$next  = 48'h000000000000;
    endcase
  end
  initial begin
      a <= 48'h000000000000;
  end
  always @(posedge clk) begin
      a <= \a$next ;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \b$next  = b;
    casez (serial_rdy)
      /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:50" */
      1'h1:
          casez (_09_)
            /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:59" */
            1'h1:
              begin
                \b$next  = _10_[47:0];
                casez (_12_)
                  /* src = "/devel/HDL/kintex-reveng/dsp-tests/mult-harness/./mult_harness.py:64" */
                  1'h1:
                      \b$next  = 48'h000000000000;
                endcase
              end
          endcase
    endcase
    casez (rst)
      1'h1:
          \b$next  = 48'h000000000000;
    endcase
  end
  initial begin
      b <= 48'h000000000000;
  end
  always @(posedge clk) begin
      b <= \b$next ;
  end
  assign _00_ = _03_;
  assign _05_ = _06_;
  assign _10_ = _11_;
endmodule

(* \amaranth.hierarchy  = "TimesTable.mult" *)
(* generator = "Amaranth" *)
module mult(factor_b, result, rst, clk, factor_a);
  reg \$auto$verilog_backend.cc:2083:dump_module$3  = 0;
  wire [95:0] _0_;
  input clk;
  wire clk;
  input [47:0] factor_a;
  wire [47:0] factor_a;
  input [47:0] factor_b;
  wire [47:0] factor_b;
  output [95:0] result;
  reg [95:0] result;
  reg [95:0] \result$next ;
  input rst;
  wire rst;
  assign _0_ = factor_a * factor_b;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$3 ) begin end
    \result$next  = result;
    \result$next  = _0_;
    casez (rst)
      1'h1:
          \result$next  = 96'h000000000000000000000000;
    endcase
  end
  initial begin
      result <= 96'h000000000000000000000000;
  end
  always @(posedge clk) begin
      result <= \result$next ;
  end
endmodule

(* cells_not_processed =  1  *)
(* src = "mult_harness.v:3.1-10.10" *)
module mult_harness(clk, uart_tx);
  wire [31:0] _0_;
  (* src = "mult_harness.v:4.17-4.20" *)
  input clk;
  wire clk;
  (* src = "mult_harness.v:5.17-5.24" *)
  output uart_tx;
  wire uart_tx;
  (* module_not_derived = 32'd1 *)
  (* src = "mult_harness.v:8.16-8.62" *)
  TimesTable times_table (
    .clk(clk),
    .rst(_0_),
    .tx(uart_tx)
  );
  assign _0_ = 32'd0;
endmodule

(* \amaranth.hierarchy  = "TimesTable.serial" *)
(* generator = "Amaranth" *)
module serial(rdy, data, ack, rst, clk, o);
  reg \$auto$verilog_backend.cc:2083:dump_module$4  = 0;
  wire _00_;
  wire [10:0] _01_;
  wire [10:0] _02_;
  wire _03_;
  wire [10:0] _04_;
  wire [10:0] _05_;
  wire [10:0] _06_;
  wire [10:0] _07_;
  wire _08_;
  wire _09_;
  wire [10:0] _10_;
  wire _11_;
  wire [4:0] _12_;
  wire [4:0] _13_;
  input ack;
  wire ack;
  reg [3:0] bitno;
  reg [3:0] \bitno$next ;
  input clk;
  wire clk;
  input [7:0] data;
  wire [7:0] data;
  wire [9:0] divisor;
  reg fsm_state;
  reg \fsm_state$next ;
  output o;
  reg o;
  reg \o$next ;
  output rdy;
  reg rdy;
  input rst;
  wire rst;
  reg [7:0] shreg__data;
  reg [7:0] \shreg__data$next ;
  reg shreg__start;
  reg \shreg__start$next ;
  reg shreg__stop;
  reg \shreg__stop$next ;
  reg [9:0] timer;
  reg [9:0] \timer$next ;
  assign _02_ = divisor - 1'h1;
  assign _03_ = timer != 1'h0;
  assign _05_ = timer - 1'h1;
  assign _00_ = timer != 1'h0;
  assign _07_ = divisor - 1'h1;
  assign _08_ = timer != 1'h0;
  assign _09_ = bitno == 1'h0;
  assign _10_ = + { shreg__stop, shreg__data, shreg__start };
  assign _11_ = timer != 1'h0;
  assign _13_ = bitno - 1'h1;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    rdy = 1'h0;
    casez (fsm_state)
      /* \amaranth.decoding  = "IDLE/0" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:212" */
      1'h0:
          rdy = 1'h1;
      /* \amaranth.decoding  = "BUSY/1" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:225" */
      1'h1:
          /* empty */;
    endcase
  end
  initial begin
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    \bitno$next  = bitno;
    casez (fsm_state)
      /* \amaranth.decoding  = "IDLE/0" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:212" */
      1'h0:
          casez (ack)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:214" */
            1'h1:
                \bitno$next  = 4'h9;
          endcase
      /* \amaranth.decoding  = "BUSY/1" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:225" */
      1'h1:
          casez (_11_)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:226" */
            1'h1:
                /* empty */;
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:228" */
            default:
                \bitno$next  = _12_[3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \bitno$next  = 4'h0;
    endcase
  end
  initial begin
      bitno <= 4'h0;
  end
  always @(posedge clk) begin
      bitno <= \bitno$next ;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    \timer$next  = timer;
    casez (fsm_state)
      /* \amaranth.decoding  = "IDLE/0" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:212" */
      1'h0:
          casez (ack)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:214" */
            1'h1:
                \timer$next  = _01_[9:0];
          endcase
      /* \amaranth.decoding  = "BUSY/1" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:225" */
      1'h1:
          casez (_03_)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:226" */
            1'h1:
                \timer$next  = _04_[9:0];
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:228" */
            default:
                \timer$next  = _06_[9:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \timer$next  = 10'h364;
    endcase
  end
  initial begin
      timer <= 10'h364;
  end
  always @(posedge clk) begin
      timer <= \timer$next ;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    \fsm_state$next  = fsm_state;
    casez (fsm_state)
      /* \amaranth.decoding  = "IDLE/0" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:212" */
      1'h0:
          casez (ack)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:214" */
            1'h1:
                \fsm_state$next  = 1'h1;
          endcase
      /* \amaranth.decoding  = "BUSY/1" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:225" */
      1'h1:
          casez (_08_)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:226" */
            1'h1:
                /* empty */;
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:228" */
            default:
                casez (_09_)
                  /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:234" */
                  1'h1:
                      \fsm_state$next  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \fsm_state$next  = 1'h0;
    endcase
  end
  initial begin
      fsm_state <= 1'h0;
  end
  always @(posedge clk) begin
      fsm_state <= \fsm_state$next ;
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$4 ) begin end
    \shreg__start$next  = shreg__start;
    \shreg__data$next  = shreg__data;
    \shreg__stop$next  = shreg__stop;
    \o$next  = o;
    casez (fsm_state)
      /* \amaranth.decoding  = "IDLE/0" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:212" */
      1'h0:
          casez (ack)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:214" */
            1'h1:
              begin
                \shreg__start$next  = 1'h0;
                \shreg__data$next  = data;
                \shreg__stop$next  = 1'h1;
              end
          endcase
      /* \amaranth.decoding  = "BUSY/1" */
      /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:225" */
      1'h1:
          casez (_00_)
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:226" */
            1'h1:
                /* empty */;
            /* src = "/devel/HDL/src/amlib/amlib/io/serial.py:228" */
            default:
                { \shreg__stop$next , \shreg__data$next , \shreg__start$next , \o$next  } = _10_;
          endcase
    endcase
    casez (rst)
      1'h1:
        begin
          \shreg__start$next  = 1'h0;
          \shreg__data$next  = 8'h00;
          \shreg__stop$next  = 1'h0;
          \o$next  = 1'h1;
        end
    endcase
  end
  initial begin
      shreg__start <= 1'h0;
      shreg__data <= 8'h00;
      shreg__stop <= 1'h0;
      o <= 1'h1;
  end
  always @(posedge clk) begin
      shreg__start <= \shreg__start$next ;
      shreg__data <= \shreg__data$next ;
      shreg__stop <= \shreg__stop$next ;
      o <= \o$next ;
  end
  assign _12_ = _13_;
  assign _01_ = _02_;
  assign _04_ = _05_;
  assign _06_ = _07_;
  assign divisor = 10'h364;
endmodule
